<?xml version="1.0" encoding="UTF-8" ?>
<ChoregrapheProject xmlns="http://www.ald.softbankrobotics.com/schema/choregraphe/project.xsd" xar_version="3">
  <Box name="root" id="-1" localization="8" tooltip="Root box of Choregraphe&apos;s behavior. Highest level possible." x="0" y="0">
    <bitmap>media/images/box/root.png</bitmap>
    <script language="4">
      <content>
        <![CDATA[]]>
      </content>
    </script>
    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
    <Timeline enable="0">
      <BehaviorLayer name="behavior_layer1">
        <BehaviorKeyframe name="keyframe1" index="1">
          <Diagram scale="84.0896">
            <Box name="gioco_simo_dice_V1 (1)" id="5" localization="8" tooltip="" x="869" y="343">
              <bitmap>media/images/box/box-python-script.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[class MyClass(GeneratedClass):
    def _init_(self):
        GeneratedClass._init_(self)

    def onLoad(self):
        from naoqi import ALProxy
        from naoqi import *
        import almath

        self.status = {
            "head": "f",
            "armL": "down",
            "armR": "down",
            "handL": "close",
            "handR": "close"
        }

        self.actions = {
            "head": {
                "dx":   "guardate a destra",
                "sx":   "guardate a sinistra",
                "up":   "guardate in alto",
                "down": "guardate in basso",
                "f":    "guardate di fronte"
            },
            "armL": {
                "up": "alzate il braccio sinistro",
                "down": "abbassate il braccio sinistro"
            },
            "armR": {
                "up":   "alzate il braccio destro",
                "down": "abbassate il braccio destro"
            },
            "handL": {
                "open":  "aprite la mano sinistra",
                "close": "chiudete la mano sinistra"
            },
            "handR": {
                "open":  "aprite la mano destra",
                "close": "chiudete la mano destra"
            }
        }

        self.compatible_actions = {
            "head": {
                "dx":   ["sx", "f", "up", "down"],
                "sx":   ["dx", "f", "up", "down"],
                "up":   ["sx", "dx", "f", "down"],
                "down": ["sx", "dx", "f", "up"],
                "f":    ["sx", "dx", "up", "down"],
            },
            "armL": {
                "up":   ["down"],
                "down": ["up"]
            },
            "armR": {
                "up":   ["down"],
                "down": ["up"]
            },
            "handL": {
                "open":  ["close"],
                "close": ["open"]
            },
            "handR": {
                "open":  ["close"],
                "close": ["open"]
            }
        }

        self.available_moves = {
            "alzate il braccio destro": [["RShoulderPitch"], [-40*almath.TO_RAD], [0.1]],
            "alzate il braccio sinistro": [["LShoulderPitch"], [-40*almath.TO_RAD], [0.1]],
            "abbassate il braccio destro": [["RShoulderPitch"], [90*almath.TO_RAD], [0.1]],
            "abbassate il braccio sinistro": [["LShoulderPitch"], [90*almath.TO_RAD], [0.1]],
            "aprite la mano destra": [["RHand"], [1.0], [0.05]],
            "aprite la mano sinistra": [["LHand"], [1.0], [0.05]],
            "chiudete la mano sinistra": [["LHand"], [0], [0.05]],
            "chiudete la mano destra": [["RHand"], [0], [0.05]],
            "guardate a destra": [["HeadYaw", "HeadPitch"], [-60*almath.TO_RAD, 0], [0.05, 0.05]],
            "guardate a sinistra": [["HeadYaw", "HeadPitch"], [60*almath.TO_RAD, 0], [0.05, 0.05]],
            "guardate in basso": [["HeadPitch", "HeadYaw"], [15*almath.TO_RAD, 0], [0.05, 0.05]],
            "guardate in alto": [["HeadPitch", "HeadYaw"], [-15*almath.TO_RAD, 0],  [0.05, 0.05]],
            "guardate di fronte": [["HeadPitch", "HeadYaw"], [0, 0], [0.05, 0.05]] # TODO: test this
        }

        self.long2synth = {
            "alzate il braccio destro": ("armR", "up"),
            "alzate il braccio sinistro": ("armL", "up"),
            "abbassate il braccio destro": ("armR", "down"),
            "abbassate il braccio sinistro": ("armL", "down"),
            "aprite la mano destra": ("handR", "open"),
            "aprite la mano sinistra": ("handL", "open"),
            "chiudete la mano sinistra": ("handL", "close"),
            "chiudete la mano destra": ("handR", "close"),
            "guardate a destra": ("head", "dx"),
            "guardate a sinistra": ("head", "sx"),
            "guardate in basso": ("head", "down"),
            "guardate in alto": ("head", "up"),
            "guardate di fronte": ("head", "f"),
        }

        self.session = qi.Session()
        self.session.connect("tcp://" + "127.0.0.1" + ":" + str(9559))
        self.tts = ALProxy("ALTextToSpeech")
        self.motion = ALProxy("ALMotion")
        self.posture = ALProxy("ALRobotPosture")
        self.al = ALProxy("ALAutonomousLife")


        self.posture.goToPosture("Stand", 1.0)

    def onUnload(self):
        pass

    def onInput_onStart(self):
        import time
        from naoqi import *
        self.al.setAutonomousAbilityEnabled("BackgroundMovement", False)
        self.al.setAutonomousAbilityEnabled("ListeningMovement", False)
        self.al.setAutonomousAbilityEnabled("SpeakingMovement", False)

        self.posture.goToPosture("Stand", 1.0)

        self.main()
        self.onInput_onStop()

        #########################

    def onInput_onUpdate(self):
        self.main()
        self.onInput_onStop()

    def main(self):
        import time
        import almath # libreria di matematica per convertire i gradi in radianti
        import random
        from random import choice
        from random import random

        self.logger.fatal(self.al.getState())

        oldStatus = self.status.copy() #posizione corrente
        actions = {}
        # FIXME: not properly setting the new status of the robot
        # per ogni parte del corpo di Nao che può essere mossa...
        for bodyPart in self.status.keys():
            # ... ne prendo il suo stato corrente...
            currentBodyPartStatus = self.status[bodyPart]
            # ... lo utilizzo per capire quali stati può raggiungere...
            currentBodyPartCompatibleActions = self.compatible_actions[bodyPart][currentBodyPartStatus]
            for avStatus in currentBodyPartCompatibleActions:
                # ... aggiungo questi al dizionario actions
                longActionName = self.actions[bodyPart][avStatus]
                actions[longActionName] = self.available_moves[longActionName]
        # adesso, `actions`, contiene solo stati raggiungibili senza problemi dal robot
        # ma è strutturato esattamente come `self.available_moves`

        # inizializzazione variabili
        comando = None
        parametri = None
        comando, parametri = choice(list(actions.items()))

        selBodyPart, selPosition = self.long2synth[comando]
        self.status[selBodyPart] = selPosition

        # self.logger.fatal(comando)
        # self.logger.fatal(parametri)

        names = parametri[0]
        angles = parametri[1]
        fractionMaxSpeed = parametri[2]

        isSimoneDice = random() <= 0.8
        self.logger.fatal("isSimoneDice: " + str(isSimoneDice))

        if isSimoneDice:
            self.tts.say("simone dice " + comando)
        else:
            self.tts.say(comando)


        time.sleep(3.0)
        self.motion.setAngles(names, angles, fractionMaxSpeed)
        time.sleep(15.0)

        if not isSimoneDice:
            time.sleep(5.0)
            self.applyStatus(oldStatus)
            time.sleep(5.0)

        #----------------------------------------------------------------

        self.onInput_onStop()

    def applyStatus(self, status = None):
        if status == None:
            status = self.status

        acts = []
        for bodyPart in status.keys():
            currentBodyPartStatus = status[bodyPart]
            longActionName = self.actions[bodyPart][currentBodyPartStatus]
            acts.append(self.available_moves[longActionName])

        totalActions = [[a[i][0] for a in acts] for i in range(0, 3)]
        self.motion.setAngles(*totalActions)


    def reset(self):
        self.status = {
            "head": "f",
            "armL": "down",
            "armR": "down",
            "handL": "open",
            "handR": "open"
        }

        self.posture.goToPosture("Stand", 1.0)

        #----------------------------------------------------------------

        self.onInput_onStop()


    def onInput_onStop(self):
        self.onUnload()
        self.onStopped()]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
              <Input name="onUpdate" type="1" type_size="1" nature="1" inner="0" tooltip="" id="4" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="5" />
            </Box>
            <Box name="loop_control (1)" id="6" localization="8" tooltip="entra esce dal programma" x="912" y="125">
              <dialogFile>../loop_control/loop_control.dlg</dialogFile>
              <bitmap>media/images/box/box-dialog.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
              <Output name="continua" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
              <Output name="fine" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" />
            </Box>
            <Box name="reset_position (1)" id="7" localization="8" tooltip="" x="1234" y="431">
              <bitmap>media/images/box/box-python-script.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[class MyClass(GeneratedClass):
    def _init_(self):
        GeneratedClass._init_(self)

    def onLoad(self):
        from naoqi import ALProxy
        from naoqi import *

        #self.al.setStatus(interactivity)
        self.session = qi.Session()
        self.session.connect("tcp://" + "127.0.0.1" + ":" + str(9559))
        self.posture = ALProxy("ALRobotPosture")
        self.al = ALProxy("ALAutonomousLife")



    def onUnload(self):
        pass

    def onInput_onStart(self):
        self.posture.goToPosture("Stand", 1.0)
        self.onInput_onStop()


    def onInput_onStop(self):
        self.al.setAutonomousAbilityEnabled("BackgroundMovement", True)
        self.al.setAutonomousAbilityEnabled("ListeningMovement", True)
        self.al.setAutonomousAbilityEnabled("SpeakingMovement", True)

        self.onUnload()
        self.onStopped()]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
            </Box>
            <Box name="Say (1)" id="8" localization="8" tooltip="Say some text. The text can be localized." x="648" y="153">
              <bitmap>media/images/box/interaction/say.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')
        self.ttsStop = self.session().service('ALTextToSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += self.getParameter("Text")
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence))
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
              <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
              <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
              <Parameter name="Text" inherits_from_parent="0" content_type="5" value="iniziamo il gioco" default_value="" tooltip="The text you want to say. Don&apos;t forget to translate it!" id="7" />
              <Resource name="Speech" type="Lock" timeout="0" />
            </Box>
            <Box name="Dialogo_SimoneDice" id="9" localization="8" tooltip="Dialogo con bimbi e gioco" x="494" y="114">
              <dialogFile>../Dialogo_Simone_diceV1/Dialogo_Simone_diceV1.dlg</dialogFile>
              <bitmap>media/images/box/box-dialog.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
              <Output name="inizioGioco" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
            </Box>
            <Link inputowner="6" indexofinput="2" outputowner="5" indexofoutput="5" />
            <Link inputowner="7" indexofinput="2" outputowner="6" indexofoutput="6" />
            <Link inputowner="5" indexofinput="4" outputowner="6" indexofoutput="5" />
            <Link inputowner="5" indexofinput="2" outputowner="8" indexofoutput="4" />
            <Link inputowner="8" indexofinput="2" outputowner="9" indexofoutput="5" />
            <Link inputowner="9" indexofinput="2" outputowner="7" indexofoutput="4" />
            <Link inputowner="9" indexofinput="2" outputowner="0" indexofoutput="2" />
          </Diagram>
        </BehaviorKeyframe>
      </BehaviorLayer>
    </Timeline>
  </Box>
</ChoregrapheProject>
