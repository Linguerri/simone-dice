<?xml version="1.0" encoding="UTF-8" ?>
<ChoregrapheProject xmlns="http://www.ald.softbankrobotics.com/schema/choregraphe/project.xsd" xar_version="3">
  <Box name="root" id="-1" localization="8" tooltip="Root box of Choregraphe&apos;s behavior. Highest level possible." x="0" y="0">
    <bitmap>media/images/box/root.png</bitmap>
    <script language="4">
      <content>
        <![CDATA[]]>
      </content>
    </script>
    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
    <Timeline enable="0">
      <BehaviorLayer name="behavior_layer1">
        <BehaviorKeyframe name="keyframe1" index="1">
          <Diagram>
            <Box name="gioco_simo_dice_V1" id="1" localization="8" tooltip="" x="350" y="319">
              <bitmap>media/images/box/box-python-script.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    #def handler(self, value):
        #if value == "ok nao spiega il gioco":
            #self.tts.setParameter("speed", 80)
            #self.tts.say("il testo del gioco....") #TODOOOOOOOOOOOO DIALOGO INTERATTIVO

        #if value == "ok nao iniziamo il gioco":
            #self.main()

        #if value == "ok nao fermati":
            #try:
                #while True:
                    #self.logger.info("sono in pausa")
            #except:
                #self.logger.fatal("errore")


        #if value == "ok nao continua il gioco":
            #raise Exception()

        #if value == "ok nao il gioco è finito":
           # self.onInput_onStop()

    def onLoad(self):
        #put initialization code here
        #pass
        from naoqi import ALProxy
        import almath
        from naoqi import *

        self.move_giusti = {
            "Simone dice alzate e abbassate il braccio destro":[["RShoulderPitch"], [-40*almath.TO_RAD], [0.1]],
            "Simone dice alzate e abbassate il braccio sinistro":[["LShoulderPitch"], [-40*almath.TO_RAD], [0.1]],
            "Simone dice aprite la mano destra":[["RHand"], [1.0], [0.05]],
            "Simone dice aprite la mano sinistra":[["LHand"], [1.0], [0.05]],
            "Simone dice chiudete la mano sinistra": [["LHand"],[1.0], [0.05]],
            "Simone dice chiudete la mano destra":[["RHand"], [1.0], [0.05]],
            "Simone dice gira la testa a destra e resta in questa posizione":[["HeadYaw"],[-60*almath.TO_RAD],[0.05]],
            "Simone dice gira la testa a sinistra e resta in questa posizione":[["HeadYaw"],[60*almath.TO_RAD], [0.05]],
            "Simone dice guarda in basso e resta in questa posizione":[["HeadPitch"],[15*almath.TO_RAD], [0.05]],
            "Simone dice guarda in alto e resta in questa posizione":[["HeadPitch"],[-15*almath.TO_RAD], [0.05]]
        }

        self.move_sbagliati = {
            "alzate il braccio destro":[["RShoulderPitch"], [-40*almath.TO_RAD], [0.1]],
            "alzate il braccio sinistro":[["LShoulderPitch"], [-40*almath.TO_RAD], [0.1]],
            "aprite la mano destra":[["RHand"], [1.0], [0.05]],
            "aprite la mano sinistra":[["LHand"],[1.0] , [0.05]],
            "chiudete la mano sinistra": [["LHand"],[1.0], [0.05]],
            "chiudete la mano destra":[["RHand"], [1.0], [0.05]],
            "gira la testa a destra e resta in questa posizione":[["HeadYaw"],[-60*almath.TO_RAD], [0.05]],
            "gira la testa a sinistra e resta in questa posizione":[["HeadYaw"],[60*almath.TO_RAD], [0.05]],
            "guarda in basso e resta in questa posizione":[["HeadPitch"],[15*almath.TO_RAD], [0.05]],
            "guarda in alto e resta in questa posizione":[["HeadPitch"],[-15*almath.TO_RAD], [0.05]]
        }

        #API classi
        self.session = qi.Session()
        self.session.connect("tcp://" + "10.80.2.30" + ":" + str(9559))
        #self.tts = self.session.service("ALTextToSpeech")
        #perchè parli
        self.tts = ALProxy("ALTextToSpeech")
        self.motion = ALProxy("ALMotion")
        self.posture = ALProxy("ALRobotPosture")
        #self.memory_service = ALProxy("ALMemory")

        ##
        #self.asr_service= ALProxy("ALSpeechRecognition")
        #mem = self.session.service("ALMemory")
        #sub = mem.subscriber("event/WordRecognizedAndGrammar")#riconoscere l'evento
        #sub.signal.connect(self.handler)#connettiamo l'evento alla funzione
        ##


        #riconosce le parole
        #self.subscriber= self.memory_service.subscriber("WordRecognizedAndGrammar")
        #self.subscriber.signal.connect(self.handler)


    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        import time
        from naoqi import *
        #Alspeechreconition
        ##
        #self.asr_service.setLanguage("Italian")
        #vocabulary = ["ok nao spiega il gioco", "ok nao iniziamo il gioco", "ok nao fermati", "ok nao continua il gioco", "ok nao il gioco è finito"]
        #self.asr_service.setVocabulary(vocabulary, True)
        #self.asr_service.subscribe("test_recognition")

        #time.sleep(1000)
        #self.asr_service.unsubscribe("test_recognition") #smette di ascoltare
        ##
        self.main()
        self.onInput_onStop()

    def main(self):
        #self.onStopped() #activate the output of the box
        #passs
        #libreria di matematica per convertire i gradi in radianti
        import time
        import almath
        import random
        from random import choice

        from random import random


        #funzione per generare un vettore di giusto sbagliato random
        scelte = None #inizializzo il vettore all'inizio è vuoto

        #scelte.append(random.choice(['giusto', 'sbagliato']))
        if random() <= 0.8:
            scelte = 'giusto'
        else:
            scelte = 'sbagliato'


        self.logger.fatal(scelte);


        #inizializzazione variabili
        comando = None
        parametri = None
        if scelte == "giusto":
            comando, parametri = choice(list(self.move_giusti.items()))
        else:
            comando, parametri = choice(list(self.move_sbagliati.items()))
        self.logger.fatal(comando)
        self.logger.fatal(parametri);

        names = parametri[0]
        angles = parametri[1]
        fractionMaxSpeed = parametri[2]

        self.tts.say(comando)
        time.sleep(3.0)
        self.motion.setAngles(names,angles,fractionMaxSpeed)
        time.sleep(15.0)

        self.posture.goToPosture("Stand", 1.0)



        #--------------------------------------------------------------------------------------

        self.onInput_onStop();


    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
            </Box>
            <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
            <Link inputowner="0" indexofinput="4" outputowner="1" indexofoutput="4" />
          </Diagram>
        </BehaviorKeyframe>
      </BehaviorLayer>
    </Timeline>
  </Box>
</ChoregrapheProject>
