<?xml version="1.0" encoding="UTF-8" ?>
<ChoregrapheProject xmlns="http://www.ald.softbankrobotics.com/schema/choregraphe/project.xsd" xar_version="3">
  <Box name="root" id="-1" localization="8" tooltip="Root box of Choregraphe&apos;s behavior. Highest level possible." x="0" y="0">
    <bitmap>media/images/box/root.png</bitmap>
    <script language="4">
      <content>
        <![CDATA[]]>
      </content>
    </script>
    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
    <Timeline enable="0">
      <BehaviorLayer name="behavior_layer1">
        <BehaviorKeyframe name="keyframe1" index="1">
          <Diagram>
            <Box name="gioco_simo_dice_V1" id="1" localization="8" tooltip="" x="350" y="319">
              <bitmap>media/images/box/box-python-script.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[class MyClass(GeneratedClass):
    def _init_(self):
        GeneratedClass._init_(self)

    def onLoad(self):
        from naoqi import ALProxy
        from naoqi import *
        import almath

        self.reset()

        self.actions = {
            "head": {
                "dx":   "guardate a destra",
                "sx":   "guardate a sinistra",
                "up":   "guardate in alto",
                "down": "guardate in basso",
                "f":    "guardate di fronte"
            },
            "armL": {
                "up": "alzate il braccio sinistro",
                "down": "abbassate il braccio sinistro"
            },
            "armR": {
                "up":   "alzate il braccio destro",
                "down": "abbassate il braccio destro"
            },
            "handL": {
                "open":  "aprite la mano sinistra",
                "close": "chiudete la mano sinistra"
            },
            "handR": {
                "open":  "aprite la mano destra",
                "close": "chiudete la mano destra"
            }
        }

        self.compatible_actions = {
            "head": {
                "dx":   ["sx", "f", "up", "down"],
                "sx":   ["dx", "f", "up", "down"],
                "up":   ["sx", "dx", "f", "down"],
                "down": ["sx", "dx", "f", "up"],
                "f":    ["sx", "dx", "up", "down"],
            },
            "armL": {
                "up":   ["down"],
                "down": ["up"]
            },
            "armR": {
                "up":   ["down"],
                "down": ["up"]
            },
            "handL": {
                "open":  ["close"],
                "close": ["open"]
            },
            "handR": {
                "open":  ["close"],
                "close": ["open"]
            }
        }

        self.available_moves = {
            "alzate il braccio destro": [["RShoulderPitch"], [-40*almath.TO_RAD], [0.1]],
            "alzate il braccio sinistro": [["LShoulderPitch"], [-40*almath.TO_RAD], [0.1]],
            "abbassate il braccio destro": [["RShoulderPitch"], [0], [0.1]], # TODO: find correct angles to put arm to rest
            "abbassate il braccio sinistro": [["LShoulderPitch"], [0], [0.1]], # TODO: find correct angles to put arm to rest
            "aprite la mano destra": [["RHand"], [1.0], [0.05]],
            "aprite la mano sinistra": [["LHand"], [1.0], [0.05]],
            "chiudete la mano sinistra": [["LHand"], [1.0], [0.05]],
            "chiudete la mano destra": [["RHand"], [1.0], [0.05]],
            "guardate a destra": [["HeadYaw"], [-60*almath.TO_RAD], [0.05]],
            "guardate a sinistra": [["HeadYaw"], [60*almath.TO_RAD], [0.05]],
            "guardate in basso": [["HeadPitch"], [15*almath.TO_RAD], [0.05]],
            "guardate in alto": [["HeadPitch"], [-15*almath.TO_RAD], [0.05]],
            "guardate di fronte": [["HeadPitch"], [-15*almath.TO_RAD], [0.05]] # TODO: test this
        }

        # API classi TODO: uncomment these lines
        self.session = qi.Session()
        self.session.connect("tcp://" + "127.0.0.1" + ":" + str(9559))
        self.tts = ALProxy("ALTextToSpeech")
        self.motion = ALProxy("ALMotion")
        self.posture = ALProxy("ALRobotPosture")


    def onUnload(self):
        pass

    def onInput_onStart(self):
        import time
        # TODO: uncomment this # from naoqi import *
        self.main()
        self.onInput_onStop()

    def main(self):
        import time
        import almath # libreria di matematica per convertire i gradi in radianti
        import random
        from random import choice
        from random import random

        actions = {}
        # per ogni parte del corpo di Nao che può essere mossa...
        for bodyPart = self.status.keys():
            # ... ne prendo il suo stato corrente...
            currentBodyPartStatus = self.status[bodyPart]
            # ... lo utilizzo per capire quali stati può raggiungere...
            currentBodyPartCompatibleActions = self.compatible_actions[bodyPart][currentBodyPartStatus]
            for avStatus = currentBodyPartCompatibleActions:
                # ... aggiungo questi al dizionario actions
                longActionName = self.actions[bodyPart][avStatus]
                actions[longActionName] = self.available_moves[longActionName]
        # adesso, `actions`, contiene solo stati raggiungibili senza problemi dal robot
        # ma è strutturato esattamente come `self.available_moves`

        # inizializzazione variabili
        comando = None
        parametri = None
        comando, parametri = choice(list(actions))

        # self.logger.fatal(comando)
        # self.logger.fatal(parametri)

        names = parametri[0]
        angles = parametri[1]
        fractionMaxSpeed = parametri[2]

        if random() <= 0.8:
            self.tts.say("simone dice " + comando)
        else:
            self.tts.say(comando)
        time.sleep(3.0)
        self.motion.setAngles(names, angles, fractionMaxSpeed)
        time.sleep(15.0)

        # TODO: test this code without this line to fix the problem
        # of robot not staying in the selected position
        self.posture.goToPosture("Stand", 1.0)

        #----------------------------------------------------------------

        self.onInput_onStop()


    def reset(self):
        self.status = {
            "head": "f",
            "armL": "down",
            "armR": "down",
            "handL": "open",
            "handR": "open"
        }

        self.posture.goToPosture("Stand", 1.0)

        #----------------------------------------------------------------

        self.onInput_onStop()


    def onInput_onStop(self):
        self.onUnload()
        self.onStopped()]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
            </Box>
            <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
            <Link inputowner="0" indexofinput="4" outputowner="1" indexofoutput="4" />
          </Diagram>
        </BehaviorKeyframe>
      </BehaviorLayer>
    </Timeline>
  </Box>
</ChoregrapheProject>
